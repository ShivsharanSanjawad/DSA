//comments credit goes to gpt ,and ignore the first line of output i tried fixing it but it's only wrong for only one output and next all ouput lines are correct
/*
This program demonstrates a general approach to thread synchronization in Java. Whenever I need to keep methods synchronized
and ensure that data generated by one thread can be accessed by another, I will implement synchronized methods in a single
class and keep the data in the main class.

Steps:
1. Data storage: In the main class, I will have shared data that needs to be accessed by multiple threads.
2. Synchronized Methods: I will create a class containing synchronized methods that operate on this shared data.
3. Thread Management: Each thread will extend a common controller class and will call these synchronized methods to perform actions on the shared data, ensuring that all operations are thread-safe.

This structure allows me to manage any data synchronization needs, ensuring safe access to shared resources.

Example Use Case: In this example, one thread generates a random number, while other threads calculate and print its square and cube. This simple demonstration effectively illustrates how to manage data access across threads while maintaining synchronization.
*/
import java.util.Random;

class SynchronizedMethods {
    private boolean isNumberPrinted = false;
    private boolean isSquarePrinted = false;

    public synchronized void printNumber(int number) {
        while (isNumberPrinted) {  
            try { wait(); } catch (InterruptedException e) {}
        }
        System.out.print(number + "\t");
        isNumberPrinted = true;
        isSquarePrinted = false;  
        notifyAll();
    }

    public synchronized void printSquare(int number) {
        while (!isNumberPrinted || isSquarePrinted) { 
            try { wait(); } catch (InterruptedException e) {}
        }
        System.out.print((number * number) + "\t");
        isSquarePrinted = true;
        notifyAll();
    }

    public synchronized void printCube(int number) {
        while (!isSquarePrinted) {  
            try { wait(); } catch (InterruptedException e) {}
        }
        System.out.println((number * number * number) + "\t");
        isNumberPrinted = false;  
        notifyAll();
    }
}

public class ThreadController extends Thread {
    static int number;
    static SynchronizedMethods syncMethods = new SynchronizedMethods();

    public static void main(String[] args) {
        new GenerateNumber().start();
        new PrintSquare().start();
        new PrintCube().start();
    }
}

class GenerateNumber extends ThreadController {
    @Override
    public void run() {
        Random random = new Random();
        while (true) {
            number = random.nextInt(10) + 1;
            syncMethods.printNumber(ThreadController.number);
            try { Thread.sleep(1000); } catch (InterruptedException e) {}
        }
    }
}

class PrintSquare extends ThreadController {
    @Override
    public void run() {
        while (true) {
            syncMethods.printSquare(number);
            try { Thread.sleep(1000); } catch (InterruptedException e) {}
        }
    }
}

class PrintCube extends ThreadController {
    @Override
    public void run() {
        while (true) {
            syncMethods.printCube(number);
            try { Thread.sleep(1000); } catch (InterruptedException e) {}
        }
    }
}
